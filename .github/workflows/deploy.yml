---
name: deploy

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  build:
    name: Build Vue App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "19"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      #       - name: Setup Pages
      #         uses: actions/configure-pages@v2
      #         with:
      #           # Automatically inject basePath in your Next.js configuration file and disable
      #           # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
      #           #
      #           # You may remove this line if you want to manage the configuration yourself.
      #           static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-vuejs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-vuejs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build
        run: ${{ steps.detect-package-manager.outputs.runner }} build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./dist


  deploy:
    name: Deploy to Github Pages
    needs: build
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
